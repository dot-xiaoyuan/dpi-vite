import { useState, useEffect } from 'react';
import { Tabs, Card, Switch, Input, InputNumber, message, Row, Col, Form, Select, Button } from 'antd';
import { GetConfig, UpdateConfig } from '../../../services/apiService.ts';

type ConfigSourceType = {
    // 配置类型定义与原先一致
};

const { TabPane } = Tabs;

export default () => {
    const [dataSource, setDataSource] = useState<ConfigSourceType | null>(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const res = await GetConfig();
                setDataSource(res);
            } catch (error) {
                message.error('获取配置失败');
            }
        };
        fetchData();
    }, []);

    // 提交整个配置
    const handleSave = async () => {
        try {
            if (!dataSource) return;
            const res = await UpdateConfig(dataSource);
            if (res?.code === 0) {
                message.success('配置更新成功');
            } else {
                message.error('更新失败');
            }
        } catch (error) {
            message.error('更新配置失败');
        }
    };

    // 更新局部数据源
    const updatePartialConfig = (updatedValues: Partial<ConfigSourceType>) => {
        setDataSource((prevData) => ({
            ...prevData,
            ...updatedValues,
        }));
    };

    // 如果数据源没有加载完成，展示加载中状态
    if (!dataSource) return <div>Loading...</div>;

    return (
        <Tabs defaultActiveKey="1">
            {/* 基本配置 */}
            <TabPane tab="基本配置" key="1">
                <Row gutter={24}>
                    <Col span={12}>
                        <Card title="基本配置" bordered={false}>
                            <Form
                                initialValues={dataSource}
                                onValuesChange={(changedValues) => updatePartialConfig(changedValues)}
                                labelCol={{ span: 6 }}
                                onFinish={handleSave}
                            >
                                <Form.Item label="网卡配置" name={['capture', 'nic']}>
                                    <Input />
                                </Form.Item>
                                <Form.Item label="日志级别" name="log_level">
                                    <Select>
                                        <Select.Option value="debug">debug</Select.Option>
                                        <Select.Option value="info">info</Select.Option>
                                        <Select.Option value="warn">warn</Select.Option>
                                        <Select.Option value="error">error</Select.Option>
                                        <Select.Option value="panic">panic</Select.Option>
                                    </Select>
                                </Form.Item>
                                <Form.Item label="调试模式" name="debug" valuePropName="checked">
                                    <Switch />
                                </Form.Item>
                                <Form.Item wrapperCol={{ offset: 6 }}>
                                    <Button type="primary" htmlType="submit">
                                        保存
                                    </Button>
                                </Form.Item>
                            </Form>
                        </Card>
                    </Col>
                </Row>
            </TabPane>

            {/* Redis 配置 */}
            <TabPane tab="Redis 配置" key="2">
                <Row gutter={[24, 16]}>
                    {Object.entries(dataSource.redis).map(([key, redisConfig]) => (
                        <Col span={12} key={key}>
                            <Card title={`${key} 配置`} bordered={false}>
                                <Form
                                    initialValues={redisConfig}
                                    onValuesChange={(changedValues) =>
                                        updatePartialConfig({
                                            redis: {
                                                ...dataSource.redis,
                                                [key]: { ...redisConfig, ...changedValues },
                                            },
                                        })
                                    }
                                    labelCol={{ span: 6 }}
                                    wrapperCol={{ span: 12 }}
                                    onFinish={handleSave}
                                >
                                    <Form.Item label="Host" name="host">
                                        <Input />
                                    </Form.Item>
                                    <Form.Item label="Port" name="port">
                                        <Input />
                                    </Form.Item>
                                    <Form.Item label="密码" name="password">
                                        <Input.Password />
                                    </Form.Item>
                                    <Form.Item wrapperCol={{ offset: 6 }}>
                                        <Button type="primary" htmlType="submit">
                                            保存
                                        </Button>
                                    </Form.Item>
                                </Form>
                            </Card>
                        </Col>
                    ))}
                </Row>
            </TabPane>

            {/* 阈值配置 */}
            <TabPane tab="阈值配置" key="3">
                <Row gutter={[24, 16]}>
                    {Object.entries(dataSource.thresholds).map(([key, thresholdConfig]) => (
                        <Col span={12} key={key}>
                            <Card title={`${key} 配置`} bordered={false}>
                                <Form
                                    initialValues={thresholdConfig}
                                    onValuesChange={(changedValues) =>
                                        updatePartialConfig({
                                            thresholds: {
                                                ...dataSource.thresholds,
                                                [key]: { ...thresholdConfig, ...changedValues },
                                            },
                                        })
                                    }
                                    labelCol={{ span: 4 }}
                                    wrapperCol={{ span: 20 }}
                                    onFinish={handleSave}
                                >
                                    <Form.Item label="阈值" name="threshold">
                                        <InputNumber min={10} />
                                    </Form.Item>
                                    <Form.Item label="正常描述" name="normal">
                                        <Input.TextArea rows={3} />
                                    </Form.Item>
                                    <Form.Item label="备注" name="remark">
                                        <Input.TextArea rows={3} />
                                    </Form.Item>
                                    <Form.Item wrapperCol={{ offset: 4 }}>
                                        <Button type="primary" htmlType="submit">
                                            保存
                                        </Button>
                                    </Form.Item>
                                </Form>
                            </Card>
                        </Col>
                    ))}
                </Row>
            </TabPane>
        </Tabs>
    );
};
